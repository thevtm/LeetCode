{
	// Place your leetcode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// https://snippet-generator.app/

	"Solution Scaffold": {
  "prefix": "scaffold",
	"scope": "typescript",
  "body": [
    "import _ from \"lodash\";",
    "",
    "import { expect, test, describe } from \"vitest\";",
    "",
    "function solution_function(n: number): number {",
    "  return -1;",
    "}",
    "",
    "type SolutionFunction = typeof solution_function;",
    "",
    "type TestCase = {",
    "  input: Parameters<SolutionFunction>;",
    "  expected_result: ReturnType<SolutionFunction>;",
    "};",
    "",
    "const test_cases: TestCase[] = [",
    "  { input: [1], expected_result: 1 },",
    "  { input: [2], expected_result: 1 },",
    "  { input: [3], expected_result: 1 },",
    "];",
    "",
    "const solutions = [{ name: \"best\", fn: solution_function }];",
    "",
    "describe.for(test_cases)(\"\\$input => \\$expected_result\", ({ input, expected_result }) => {",
    "  test.for(solutions)(\"\\$name\", ({ fn }) => {",
    "    expect(fn(...input)).toStrictEqual(expected_result);",
    "  });",
    "});"
  ],
  "description": "Solution Scaffold",
  }
}
